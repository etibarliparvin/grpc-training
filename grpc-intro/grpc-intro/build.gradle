buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.liquibase:liquibase-gradle-plugin:2.0.4"
    }
}

buildscript {
    ext {
        protobufVersion = '3.14.0'
        protobufPluginVersion = '0.6.1'
        grpcVersion = '1.35.0'
        protobufGradlePluginVersion = '0.8.18'
    }
}

buildscript {
    dependencies {
        classpath "com.google.protobuf:protobuf-gradle-plugin:${protobufGradlePluginVersion}"
    }
}

plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'

    id 'nu.studer.jooq' version '7.1.1'
    id 'idea'
    id 'java-library'
    id 'com.google.protobuf' version "${protobufPluginVersion}"
    id 'org.liquibase.gradle' version '2.0.4'
}

def changeLogPath= "$projectDir/src/main/resources/db/changelog/"
def changeLogMasterFileName ='000.changelog-master.yaml'

group = 'az.etibarli'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.19.2"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.45.1'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

sourceSets.main.java.srcDir new File(buildDir, 'generated/source')

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.liquibase:liquibase-core'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    jooqGenerator 'org.postgresql:postgresql:42.3.1'
    jooqGenerator 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.1'
    jooqGenerator("org.jooq:jooq-meta-extensions-liquibase:3.16.6")

    compileOnly 'jakarta.annotation:jakarta.annotation-api:1.3.5'
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53' // necessary for Java 9+

    implementation 'io.netty:netty-tcnative-boringssl-static:2.0.52.Final'
    implementation 'net.devh:grpc-server-spring-boot-starter:2.12.0.RELEASE'
    implementation "io.grpc:grpc-netty:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"

    liquibaseRuntime 'org.liquibase:liquibase-core:4.2.2'

    liquibaseRuntime 'ch.qos.logback:logback-core'
    liquibaseRuntime 'ch.qos.logback:logback-classic'
    liquibaseRuntime 'org.slf4j:slf4j-api'
    liquibaseRuntime 'org.yaml:snakeyaml'

    liquibaseRuntime 'org.postgresql:postgresql'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.3'
}

liquibase {
    activities {
        main {
            changeLogFile changeLogMasterFileName
            url 'jdbc:postgresql://localhost:1112/unknown'
            username 'postgres'
            password 'root'
            defaultSchemaName 'public'
            classpath changeLogPath
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
    clean {
        delete generatedFilesBaseDir
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

idea {
    module {
        sourceDirs += file("src/generated/main/java")
        sourceDirs += file("src/generated/main/grpc")
        generatedSourceDirs += file("src/generated/main/java")
        generatedSourceDirs += file("src/generated/main/grpc")
    }
}

jooq {
    version = '3.16.4'  // the default (can be omitted)
    edition = nu.studer.gradle.jooq.JooqEdition.OSS  // the default (can be omitted)

    configurations {
        main {  // name of the jOOQ configuration
            generateSchemaSourceOnCompilation = true  // default (can be omitted)

            generationTool {
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = 'jdbc:postgresql://localhost:1112/unknown'
                    user = 'postgres'
                    password = 'root'
                    properties {
                        property {
                            key = 'ssl'
                            value = 'false'
                        }
                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        forcedTypes {
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'JSONB?'
                            }
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'INET'
                            }
                        }
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'nu.studer.sample'
                        directory = 'build/generated-src/jooq/main'  // default (can be omitted)
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
